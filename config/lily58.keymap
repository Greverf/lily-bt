/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define TILDE  4

/ {
    kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |
            bindings = <
&none   &kp N1 &kp N2 &kp N3   &kp N4   &kp N5                     &kp N6 &kp N7   &kp N8    &kp N9  &kp N0   &kp INS
&kp BSLH   &kp SQT  &kp COMMA  &kp DOT     &kp P    &kp Y                      &kp F  &kp G     &kp C     &kp R   &kp L    &kp FSLH
&kp EQUAL &kp A  &kp O  &kp E    &kp U    &kp I                      &kp D  &kp H    &kp T     &kp N   &kp S &kp MINUS
&kp GRAVE &kp SEMI  &kp Q  &kp J    &kp K    &kp X  &kp LBKT   &kp RBKT &kp B  &kp M    &kp W &kp V &kp Z &sl 4
                        &kp LGUI &kp RALT  &mo 1  &kp RSHFT  &kp SPACE  &mo 2  &kp LCTRL &trans
            >;

            
        };

        lower_layer {
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&kp F1     &kp F2           &kp F3            &kp F4            &kp F5       &kp F6                       &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
&none     &kp LS(LG(T))      &kp LA(SPACE)    &kp LC(F)       &kp LS(LG(S))    &kp LC(Y)                       &kp PG_UP    &kp HOME    &kp UP    &kp END   &kp CAPS   &none
&kp ESC  &kp LGUI     &kp LALT            &kp LSHFT          &kp LCTRL   &kp RALT                    &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT  &kp DEL  &none
&trans     &kp LC(Z)        &kp LC(X)         &kp LC(C)         &kp LC(TAB)  &kp LC(V)    &trans   &trans    &kp LC(BSPC)    &kp BSPC &kp INS  &kp K_APP  &none  &trans
                                              &trans            &trans       &trans    &trans   &kp ENTER    &trans    &trans    &trans
            >;

            
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&none    &none &none &none  &none  &none                                &none    &none &none &none  &none  &none
&none    &kp LG(N1) &kp LG(N2) &kp LG(N3)  &kp LG(N4)  &kp LG(N5)       &none    &none &none &none  &none  &none
&none    &none &none &none  &none  &none                                &none    &none &none &none  &none  &none
&none    &none &none &none  &none  &none      &none      &none          &none    &none &none &none  &none  &trans
                        &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans
            >;

            
        };

        adjust_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&none    &none &none &none  &none  &none                                &none    &none &none &none  &none  &none
&none    &kp LG(N1) &kp LG(N2) &kp LG(N3)  &kp LG(N4)  &kp LG(N5)       &none    &kp C_PWR &kp C_PP  &kp C_SLEEP  &none  &none
&none    &none &none &none  &none  &none                                &none    &kp C_PREV &kp C_PP &kp C_NEXT  &none  &none
&none    &none &none &none  &none  &none      &none      &none          &none    &kp C_VOL_DN &kp C_PLAY &kp C_VOL_UP  &none  &trans
                        &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans
            >;

            
        };

        tilde_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
            bindings = <
&none    &none &none &none  &none  &none                                &none    &none &none &none  &none  &none
&none    &none &none &none  &none  &none                                &none    &kp RA(U) &none &none  &none  &none
&none    &kp RA(X) &kp RA(DOT) &kp RA(G)  &kp RA(J)  &kp RA(B)                 &none    &none &none &kp RA(N)  &none  &none
&none    &none &none &none  &none  &none      &none      &none          &none    &none &none &none  &none  &trans
                        &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans
            >;

           
        };
    };
};
